name: Build and Push Docker Images

on:
  push:
    branches: [dev, stg, main]
  pull_request:
    branches: [dev, stg, main]

env:
  # Batch processing
  BATCH_SIZE: 50
  LOG_LEVEL: DEBUG
  
  # Metadata collection
  STALE_METADATA_THRESHOLD: 30
  
  # Media filtration
  REEL_DRIVER_THRESHOLD: 0.35
  
  # Cleanup automation
  TARGET_ACTIVE_ITEMS: 10
  TRANSFERRED_ITEM_CLEANUP_DELAY: 0
  HUNG_ITEM_CLEANUP_DELAY: 1

jobs:
  build-base:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: at-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containerization/dockerfile.00_base
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BATCH_SIZE=${{ env.BATCH_SIZE }}
            LOG_LEVEL=${{ env.LOG_LEVEL }}
            STALE_METADATA_THRESHOLD=${{ env.STALE_METADATA_THRESHOLD }}
            REEL_DRIVER_THRESHOLD=${{ env.REEL_DRIVER_THRESHOLD }}
            TARGET_ACTIVE_ITEMS=${{ env.TARGET_ACTIVE_ITEMS }}
            TRANSFERRED_ITEM_CLEANUP_DELAY=${{ env.TRANSFERRED_ITEM_CLEANUP_DELAY }}
            HUNG_ITEM_CLEANUP_DELAY=${{ env.HUNG_ITEM_CLEANUP_DELAY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            TRANSMISSION_HOST=${{ secrets.TRANSMISSION_HOST }}
            TRANSMISSION_PORT=${{ secrets.TRANSMISSION_PORT }}
            TRANSMISSION_USER=${{ secrets.TRANSMISSION_USER }}
            TRANSMISSION_PASS=${{ secrets.TRANSMISSION_PASS }}
            TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}
            OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}
            REEL_API_KEY=${{ secrets.REEL_API_KEY }}

  build-modules:
    runs-on: ubuntu-latest
    needs: build-base
    strategy:
      matrix:
        module:
          - { name: "rss-ingest", number: "01", dockerfile: "rss_ingest" }
          - { name: "collect", number: "02", dockerfile: "collect" }
          - { name: "parse", number: "03", dockerfile: "parse" }
          - { name: "file-filtration", number: "04", dockerfile: "file_filtration" }
          - { name: "metadata-collection", number: "05", dockerfile: "metadata_collection" }
          - { name: "media-filtration", number: "06", dockerfile: "media_filtration" }
          - { name: "initiation", number: "07", dockerfile: "initiation" }
          - { name: "download-check", number: "08", dockerfile: "download_check" }
          - { name: "transfer", number: "09", dockerfile: "transfer" }
          - { name: "cleanup", number: "10", dockerfile: "cleanup" }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: at-${{ matrix.module.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push module image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containerization/dockerfile.${{ matrix.module.number }}_${{ matrix.module.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-images:
    runs-on: ubuntu-latest
    needs: [build-base, build-modules]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test base image
        run: |
          docker build -f containerization/dockerfile.00_base -t at-base:test .
          docker run --rm at-base:test python --version

      - name: Test RSS ingest image
        run: |
          docker build -f containerization/dockerfile.01_rss_ingest -t at-rss-ingest:test .
          echo "RSS ingest image built successfully"